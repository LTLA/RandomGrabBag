% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testGeneComboCounts.R
\name{testGeneComboCountsBetweenGroups}
\alias{testGeneComboCountsBetweenGroups}
\title{Test for DE gene combinations}
\usage{
testGeneComboCountsBetweenGroups(counts, ...)
}
\arguments{
\item{counts}{A \linkS4class{SummarizedExperiment} containing cell counts for each gene combination (row) and group (column),
such as that produced by \code{\link{countCellsPerGeneCombo}}.
Alternatively, a count matrix containing the same information.}

\item{...}{Further arguments to pass to \code{\link[scran]{combineMarkers}}.}
}
\value{
A \linkS4class{List} containing one \linkS4class{DataFrame} per group.
Each row of a DataFrame for a particular group corresponds to a gene combination, 
ordered by the degree of upregulation of that combination in the current group compared to all other groups.
Columns contain the combined p-value across all pairwise comparisons involving the current group
as well as the log-odds ratio against each other group.
}
\description{
Test for differential expression of gene combinations between pairs of groups using Fisher's exact test.
}
\details{
This performs pairwise tests for differential expression of each gene combination in each group compared to every other group.
For each gene combination and for each pair of groups,
we construct a 2-by-2 contigency matrix using the number of cells expressing that combination in the two groups.
We condition on the total number of cells - see \code{?\link{countCellsPerGeneCombo}} for comments on cell count normalization
- and then apply a one-sided Fisher's exact test.

Once we obtain p-values and log-odds ratios for all pairwise comparisons, 
we consolidate them into a ranked list for each group using the \code{\link[scran]{combineMarkers}} function.
This provides a convenient per-group summary of the genes upregulated in each group compared to all others.
See \code{?\link[scran]{combineMarkers}} for more details.
}
\examples{
df <- data.frame(
    cell.id=sample(LETTERS, 30, replace=TRUE),
    v_gene=sample(c("TRAV1", "TRAV2", "TRAV3"), 30, replace=TRUE),
    j_gene=sample(c("TRAJ4", "TRAJ5", "TRAV6"), 30, replace=TRUE)
)

y <- splitToCells(df, field="cell.id")
out <- countCellsPerGeneCombo(y, c("v_gene", "j_gene"), 
   group=sample(3, length(y), replace=TRUE))

de <- testGeneComboCountsBetweenGroups(out)
de[[1]]

}
\author{
Aaron Lun
}
